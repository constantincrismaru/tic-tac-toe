{"version":3,"sources":["components/box.jsx","components/board.jsx","components/game.jsx","components/play.jsx","components/results.jsx","components/home.jsx","App.js","reportWebVitals.js","index.js"],"names":["Box","name","onClick","value","className","Board","Array","map","_","pos","winningPositions","Game","xPlayerName","oPlayerName","useState","fill","board","setBoard","message","setMessage","isXPlayerTurn","setIsXPlayerTurn","history","useHistory","results","setResults","useEffect","a","get","data","fetchResults","saveResult","result","push","xPlayer","oPlayer","set","boardCopy","some","position","b","c","isWon","playerWon","indexOf","Play","setXPlayerName","setOPlayerName","isPlaying","setIsPlaying","disabled","type","onChange","e","target","Results","index","Fragment","Home","App","basename","exact","activeClassName","to","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c392262f.chunk.js","sourcesContent":["\nimport React from 'react' \n\nexport const Box = ({ name, onClick, value }) => <button name={name} className=\"box\" onClick={onClick}>{value}</button>\n\nexport default Box","import Box from './box'\n\nconst Board = ({ onClick, value }) => (\n    <div className=\"board\">\n        {[...Array(9)].map((_, pos) => <Box key={pos} name={pos} onClick={() => onClick(pos)} value={value[pos]} />)}\n    </div>\n)\n\nexport default Board","import React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Board from './board'\nimport { set, get } from 'idb-keyval'\n\n// list of postion that is winning\nconst winningPositions = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n]\n\nconst isWon = board => {\n    return winningPositions.some(position => {\n        let [a, b, c] = position\n\n        if (board[a] !== \"\" && board[a] === board[b] && board[a] === board[c]) {\n            return true\n        }\n\n        return false\n    })\n}\n\nconst Game = ({ xPlayerName, oPlayerName }) => {\n    const [board, setBoard] = useState(Array(9).fill(\"\"))\n    const [message, setMessage] = useState(`Player ${xPlayerName} turn:`)\n    const [isXPlayerTurn, setIsXPlayerTurn] = useState(true)\n    const history = useHistory()\n    const [results, setResults] = useState([])\n\n    useEffect(() => {\n        const fetchResults = async () => {\n            const data = await get('results')\n\n            if (data) {\n                setResults(data)\n            }\n        }\n\n        fetchResults()\n    }, [])\n\n    const refresh = () => {\n        setBoard(Array(9).fill(\"\"))\n        setIsXPlayerTurn(true)\n        setMessage(`Player ${xPlayerName} turn:`)\n    }\n\n    const saveResult = result => {\n        results.push({\n            xPlayer: xPlayerName,\n            oPlayer: oPlayerName,\n            result\n        })\n\n        setResults(results)\n        set(\"results\", results)\n    }\n\n    const handleInput = pos => {\n        // skip if already checked\n        if (isXPlayerTurn === null || board[pos] !== \"\") {\n            return\n        }\n\n        const boardCopy = [...board]\n        boardCopy[pos] = (isXPlayerTurn && \"X\") || \"O\"\n        setBoard(boardCopy)\n\n\n        if (isWon(boardCopy)) {\n            // game is over\n            const playerWon = (isXPlayerTurn && xPlayerName) || oPlayerName\n            setMessage(`Player ${playerWon} won!`)\n            setIsXPlayerTurn(null)\n\n            saveResult(playerWon)\n            return\n        }\n\n        if (boardCopy.indexOf(\"\") === -1) {\n            // if no more moves game is draw\n            setMessage(`Draw!`)\n            setIsXPlayerTurn(null)\n            saveResult(\"Draw\")\n        } else {\n            setMessage(`Player ${(!isXPlayerTurn && xPlayerName) || oPlayerName} turn:`)\n            setIsXPlayerTurn(!isXPlayerTurn)\n        }\n    }\n\n    return <div>\n        <div>{message}</div>\n        <Board onClick={handleInput} value={board} />\n        {isXPlayerTurn === null && <div>\n            <button onClick={() => history.push(\"/results\")}>Results</button>\n            <button onClick={refresh}>Restart</button>\n        </div>}\n    </div>\n}\n\nexport default Game","import React, { useState } from 'react'\nimport Game from './game'\n\nconst Play = () => {\n    const [xPlayerName, setXPlayerName] = useState('')\n    const [oPlayerName, setOPlayerName] = useState('')\n    const [isPlaying, setIsPlaying] = useState(false)\n\n    return <div className=\"play\">\n        <h2>Play</h2>\n        {(!isPlaying && <div>\n            <div>\n                <div className=\"player-info\">\n                    <label>Player 1: </label>\n                    <input disabled={isPlaying} type=\"text\" onChange={e => setXPlayerName(e.target.value)} />\n                </div>\n                <div className=\"player-info\">\n                    <label>Player 2: </label>\n                    <input disabled={isPlaying} type=\"text\" onChange={e => setOPlayerName(e.target.value)} />\n                </div>\n            </div>\n\n            <button disabled={!xPlayerName || !oPlayerName} onClick={() => setIsPlaying(true)}>Play</button>\n        </div>) ||\n            <div>\n                <Game xPlayerName={xPlayerName} oPlayerName={oPlayerName}></Game>\n            </div>}\n    </div>\n}\n\nexport default Play","import React, { useEffect, useState } from 'react'\nimport { get } from 'idb-keyval'\n\nconst Results = () => {\n    const [results, setResults] = useState([])\n\n    useEffect(() => {\n        const fetchResults = async () => {\n            const data = await get('results')\n\n            if (data) {\n                setResults(data)\n            }\n        }\n\n        fetchResults()\n    }, [])\n\n    return <div className=\"results\">\n        <h2>Results</h2>\n        <div className=\"container\">\n            <div>Player 1</div>\n            <div>Player 2</div>\n            <div>Result</div>\n            {results.map((result, index) => <React.Fragment key={index}>\n                <div>{result.xPlayer}</div>\n                <div>{result.oPlayer}</div>\n                <div>{result.result}</div>\n            </React.Fragment>)}\n        </div>\n    </div>\n}\n\nexport default Results","import React from 'react'\n\nconst Home = () => {\n    return <div>\n        <h2>Home</h2>\n        <div>\n            Play or see results.\n        </div>\n    </div>\n}\n\nexport default Home","import Play from './components/play'\nimport Results from './components/results'\nimport Home from './components/home'\nimport { BrowserRouter, Route, Switch, NavLink } from 'react-router-dom'\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename=\"/tic-tac-toe\">\n        <div>\n          <div>\n            <NavLink className=\"app-link\" exact={true} activeClassName='active-link' to='/play'>Play</NavLink>\n            <NavLink className=\"app-link\" activeClassName='active-link' to='/results'>Results</NavLink>\n          </div>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/play\" component={Play} />\n            <Route path=\"/results\" component={Results} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}